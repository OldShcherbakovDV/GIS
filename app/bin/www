#!/usr/bin/env node
import {DataBase, Generator} from "../database/index";
const regexpIndexOf = function (a, regexp) {
    for (let i in a) {
        if (a[i].toString().match(regexp)) {
            return i;
        }
    }
    return -1;
}
if (process.argv.indexOf('-g') != -1) {
    const db = new DataBase;
    const streetCountI = regexpIndexOf(process.argv, '-sc=\d+');
    const maxBuildingCountI = regexpIndexOf(process.argv, '-mbc=\d+');
    const streetCount = streetCountI == -1 ? 40 : process.argv[streetCountI].substring(4);
    const maxBuildingCount = maxBuildingCountI == -1 ? 40 : process.argv[maxBuildingCountI].substring(5);

    new Generator(db, streetCount, maxBuildingCountI, () => {
        console.log('Генерация прошла успешно');
    });

    console.log(`Генерируется карта из ${streetCount} с максимальным кол-вом построек на улице ${maxBuildingCount}`);
} else {
    /**
     * Module dependencies.
     */

    var app = require('../app');
    var debug = require('debug')('gis:server');
    var http = require('http');

    /**
     * Get port from environment and store in Express.
     */

    var port = normalizePort(process.env.PORT || '3000');
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    var server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }
}

